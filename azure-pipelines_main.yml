# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  pythonVersion: '3.9'
  venvPath: '.venv'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    sudo apt-get -y install tree
    pwd
    tree -L 2
  displayName: 'Run a multi-line script'

- script: |
    sudo apt update
    wget https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip
    unzip duckdb_cli-linux-amd64.zip
    chmod +x duckdb
    sudo mv duckdb /usr/local/bin/duckdb
    duckdb --version
  displayName: 'Install DuckDB'

# Step 1: Checkout the code
#- task: Checkout@1

# Step 2: Set up Python environment
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(pythonVersion)'
    addToPath: true


# Step 3: Install dependencies
- script: |
    pwd
    ls -alhG
    cd riotinto
    python -m venv $(venvPath)
    source $(venvPath)/bin/activate
    pip install --upgrade pip
    pip install -r requirements.txt
  displayName: "Setup virtual environment and install dependencies"

# Step 4: Run linting (flake8)
- script: |
    cd riotinto
    source $(venvPath)/bin/activate
    pip install flake8
    ls -alhG
    ls -alhG src/
    flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
  displayName: "Run flake8 for linting"

# Step 5: Run tests
- script: |
    cd riotinto
    source $(venvPath)/bin/activate
    python -m unittest discover -s src/ -p "test_*.py"
  displayName: "Run Python unittests"

# Step 6: Run environment validation script
- script: |
    cd riotinto
    source $(venvPath)/bin/activate
    python test_environment.py
  displayName: "Validate environment setup"